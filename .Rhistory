for(i in 0:max(highDensitiBinsFreq)){
pvalues[which(highDensitiBinsFreq == i)] <- length(which(highDensitiBinsFreqRandomFreqNull >i))/ length(highDensitiBinsFreqRandomFreqNull)
}
freq.cut <- min(highDensitiBinsFreq[names(which(p.adjust(pvalues, method=method) < p.cut))])
if(plot == TRUE){
xstart<- 1
obsd <- highDensitiBinsFreq[which(highDensitiBinsFreq >= xstart)]
nulld<- highDensitiBinsFreqRandomFreqNull[which(highDensitiBinsFreqRandomFreqNull >= xstart)]
max_freq <- max(as.numeric(names(table(obsd))),as.numeric(names(table(nulld))))
h1 <- hist(obsd, breaks=seq(xstart,max_freq,1),plot=FALSE)
h2 <- hist(nulld, breaks=seq(xstart,max_freq,1),plot=FALSE)
max_density <- max(h1$density,h2$density)
hist(obsd, breaks=seq(xstart,max_freq,1),col='salmon', border=NA, xlim=c(0,max_freq), ylim=c(0,max_density),
las=1,cex.axis=1.4,ylab="",prob = TRUE ,main="",xlab="n samples",right = TRUE)
hist(nulld, breaks=seq(xstart,max_freq,1), add=TRUE,col=scales::alpha('black',.5),
border=NA, prob = TRUE)
legend("topright",c("Observed","Null"),
fill=c('salmon',scales::alpha('black',.5)),border=NA,bty='n',cex=1.1)
lines(c(freq.cut,freq.cut),c(0,max(h1$density)/2))   # cutoff for statistical significance
text(freq.cut+max_freq/25,max(h1$density)/3,paste(method, "<", p.cut),srt=90)
}
return(null.freq(
freq.cut = freq.cut,
pvalues = pvalues,
observed = highDensitiBinsFreq,
null = highDensitiBinsFreqRandomFreqNull,
param = list(method=method, p.cut= p.cut, iter=iter)
))
}
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
pdf("figures/suppl_fig_S3.pdf",height=6,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
match.breaks <- function(brk1,
brk2,
maxgap=100000,
verbose=FALSE,
plot=TRUE){
common_samples <- intersect(names(brk1@burden),names(brk2@burden))
stopifnot(length(common_samples) > 0, local = TRUE)
brk1_match <- brk2_match <- res <- list()
for(id in common_samples){
brk1_i <- brk1@breaks[which(brk1@breaks$sample == id),]
brk_ranges1 <- with(brk1_i, GRanges(chrom, IRanges(start=pos, end=pos)))
brk2_i <- brk2@breaks[which(brk2@breaks$sample == id),]
brk_ranges2 <- with(brk2_i, GRanges(chrom, IRanges(start=pos, end=pos)))
options(warn=-1)
seg_seg = GenomicAlignments::findOverlaps(brk_ranges1, brk_ranges2, maxgap=maxgap)
options(warn=0)
brk_match1 <- sort(unique(queryHits(seg_seg)))
brk_match2 <- sort(unique(subjectHits(seg_seg)))
res[[id]] <- data.table(id,length(brk_match1), nrow(brk1_i), length(brk_match2), nrow(brk2_i))
colnames(res[[id]]) <- c("sample","matched.brk1", "total.brk1", "matched.brk2", "total.brk2")
brk1_match[[id]] <- brk1_i[brk_match1,]
brk2_match[[id]] <- brk2_i[brk_match2,]
}
restab <- do.call(rbind,res)
if(plot == TRUE){
def.par <- par(no.readonly = TRUE)
par(mfrow=c(2,1))
restab <- restab[order(restab$total.brk2)]
m2 <- sprintf("%.1f",100*mean(na.omit(restab$matched.brk2/restab$total.brk2)))
barplot(rbind(restab$matched.brk2, restab$total.brk2 - restab$matched.brk2),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4,
names=restab$sample,ylab="#samples" )
legend("top",paste(brk2@param$datatype," breaks matched by ",
brk1@param$datatype,
" breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
restab <- restab[order(restab$total.brk1)]
m2 <- sprintf("%.1f",100*mean(na.omit(restab$matched.brk1/restab$total.brk1)))
barplot(rbind(restab$matched.brk1, restab$total.brk1 - restab$matched.brk1),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4,
names=restab$sample,ylab="#samples")
legend("top",paste(brk1@param$datatype,
" breaks matched by ",brk2@param$datatype,
" breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
par(def.par)
}
return(list(
brk1_match = do.call(rbind,brk1_match),
brk2_match = do.call(rbind,brk2_match),
restab= restab))
}
#' Class to store breakpoint annotations in association with genomic features (e.g. gene loci)
#' @param breaks (data.table): the breakpoint info containing data.table, this will be occupied by the CNV segmentation data in the case of cnv.break.annot or SV for sv.break.annot. Unique random string rownames are added to the returned breaks data.frame.
#' @param burden (numeric): a vector containing the total number of breakpoints in each sample
#' @param param (list): a list of parametres provided
#' @return an instance of the class 'breaks' containing breakpoint and breakpoint burden information
#' @export
breaks <- setClass("breaks", representation(
breaks  = "data.table",
burden = "numeric",
param = "list"
))
setMethod("show","breaks",function(object){
writeLines(paste("An object of class breaks from svpluscnv containing",object@param$datatype,"breakpoints:
\nNumber of samples=",length(object@burden),
"\nTotal number of breakpoints =",nrow(object@breaks)))
})
cnv.breaks <- function(cnv,
fc.pct = 0.2,
break.width = 10000,
min.cnv.size = NULL,
min.num.probes=NULL,
chrlist=NULL,
low.cov=NULL,
clean.brk=NULL,
verbose=TRUE){
stopifnot(cnv@type == "cnv")
cnvdat <- cnv@data
if(is.null(chrlist)) chrlist <- unique(cnvdat$chrom)
chrlist <- chr.sort(chrlist)
brk.burden <- rep(0,length(unique(cnvdat$sample)))
names(brk.burden) <- unique(cnvdat$sample)
if(!is.null(min.cnv.size)) cnvdat <- cnvdat[which(cnvdat$end - cnvdat$start >= min.cnv.size),]
if(!is.null(min.num.probes)) cnvdat <- cnvdat[which(cnvdat$probes  >= min.num.probes),]
lastrow <- nrow(cnvdat)
pos <- round(apply(cbind(cnvdat[2:(lastrow),"start"], cnvdat[1:(lastrow-1),"end"]),1,mean))
chrom <- cnvdat[2:(lastrow),"chrom"]
sample <- cnvdat[2:(lastrow),"sample"]
width <- cnvdat[2:(lastrow),"start"] - cnvdat[1:(lastrow-1),"end"]
FC <-  (2^cnvdat[1:(lastrow-1),"segmean"]) / (2^cnvdat[2:lastrow,"segmean"])
uid <- paste("brk_",createRandomString(nrow(cnvdat)-1,8),sep="")
breakpoints <- data.table(sample,chrom,pos,width,FC,uid)
colnames(breakpoints) <- c("sample","chrom","pos","width","FC","uid")
break_idx <- c(which( log2(FC) >= log2(1+fc.pct)),which( log2(FC) < log2(1 - fc.pct)))
samechr <- which(apply(cbind(cnvdat[1:(lastrow-1),"chrom"],cnvdat[2:(lastrow),"chrom"]),1,anyDuplicated) == 2)
samesample <-  which(apply(cbind(cnvdat[1:(lastrow-1),"sample"],cnvdat[2:(lastrow),"sample"]),1,anyDuplicated) == 2)
if(is.null(break.width)) break.width <- Inf
brwidthin <- which(width < break.width)
breakpoints <- breakpoints[Reduce(intersect, list(break_idx,samechr,samesample,brwidthin)),]
if(!is.null(low.cov)){
message("Filtering breakpoints in low coverage regiomns")
colnames(low.cov) <- c("chrom","start","end")
low_cov_GR = with(low.cov, GRanges(chrom, IRanges(start=start, end=end)))
breakpoints_GR = with(breakpoints, GRanges(chrom, IRanges(start=start, end=end)))
overlapgr <- GenomicAlignments::findOverlaps(breakpoints_GR,low_cov_GR,ignore.strand=TRUE)
breakpoints <- breakpoints[setdiff(1:nrow(breakpoints),queryHits(overlapgr)),]
}
if(!is.null(clean.brk)){
breakids <- unite(breakpoints[,c(2:4)],newcol)$newcol
breakids.freq <- sort(table(breakids),decreasing=TRUE)
breakpoints <- breakpoints[which(breakids %in% names(which(breakids.freq < clean.brk))),]
}
brk.burden.sub <- table(breakpoints$sample)
brk.burden[names(brk.burden.sub)] <- brk.burden.sub
return(breaks(breaks=breakpoints,
burden=brk.burden,
param=list(
datatype=cnv@type,
fc.pct = fc.pct,
min.cnv.size = min.cnv.size,
min.num.probes=min.num.probes,
low.cov=low.cov,
clean.brk=clean.brk
)
)
)
}
svc.breaks <- function(svc, low.cov=NULL){
stopifnot(svc@type == "svc")
svcdat <- svc@data
brk.burden <- rep(0,length(unique(svcdat$sample)))
names(brk.burden) <- unique(svcdat$sample)
uid<- paste("brk_",createRandomString(nrow(svcdat)*2,8),sep="")
svcdat.breaks <- data.table(c(svcdat$sample,svcdat$sample),
c(svcdat$chrom1,svcdat$chrom2),
c(svcdat$pos1,svcdat$pos2),
c(svcdat$strand1,svcdat$strand2),
c(svcdat$svclass,svcdat$svclass),
c(svcdat$uid,svcdat$uid),
uid)
colnames(svcdat.breaks) <- c("sample","chrom","pos","strand","svclass","svcuid","uid")
if(!is.null(low.cov)){
low.cov.df <- data.table(low.cov[,1:3])
colnames(low.cov.df) <- c("chrom","start","end")
svc_ranges <- with(svcdat.breaks, GRanges(chrom, IRanges(start=pos, end=pos)))
low.cov_ranges <- with(low.cov.df, GRanges(chrom, IRanges(start=start, end=end)))
low.cov_ranges = GenomicAlignments::findOverlaps(svc_ranges,low.cov_ranges)
svcdat.breaks <- svcdat.breaks[which(!svcdat.breaks$id %in% queryHits(low.cov_ranges)),]
}else{
svcdat.breaks <- svcdat.breaks
}
brk.burden.sub <- table(svcdat.breaks$sample)
brk.burden[names(brk.burden.sub)] <- brk.burden.sub
return(breaks(breaks=svcdat.breaks,
burden=brk.burden,
param=list(
datatype=svc@type,
low.cov=low.cov
)
)
)
}
break.density <- function(brk,
chr.lim=NULL,
genome.v = "hg19",
window.size = 10,
slide.size=2,
verbose=TRUE){
if(is.null(chr.lim)){
chr.lim<- d3gb.chr.lim(genome.v=genome.v)
}else{
stopifnot(ncol(chr.lim) == 3)
}
chr.begin <- chr.lim$begin
chr.end <- chr.lim$end
names(chr.begin) <- names(chr.end) <- chr.lim$chrom
# make sure both chr.lim and breaks have same chromosome names
seqnames <- intersect(chr.lim$chrom,brk@breaks$chr)
stopifnot(length(seqnames) > 0)
# a template vector to save breakpoint counts
templatevector <- brk@burden
templatevector[]<-0
WS <- window.size * 1e+6
SS <- slide.size * 1e+6
offset <- window.size/slide.size
chrlist <- chr.sort(chr.lim$chrom)
# count breaks for each chromosome for each fragment
fragment <- list()
for(chr in  chrlist){
if(verbose) cat("\r",chr)
chr_breaks <- brk@breaks[which(brk@breaks$chrom == chr),]
frag <- seq(chr.begin[chr],chr.end[chr]+SS,SS)
for(i in (1+offset):length(frag)){
start <- frag[i - offset]
stop <- frag[i]
fragment[[paste(chr,start,stop)]] <- templatevector
break.position <- chr_breaks$pos
res_bp <- table(chr_breaks[intersect(which(break.position > start),which(break.position < stop)),"sample"])
fragment[[paste(chr,start,stop)]][names(res_bp)] <- res_bp
}
}
if(verbose) cat("Done!\n")
return( do.call(cbind,fragment))
}
match.breaks <- function(brk1,
brk2,
maxgap=100000,
verbose=FALSE,
plot=TRUE){
common_samples <- intersect(names(brk1@burden),names(brk2@burden))
stopifnot(length(common_samples) > 0, local = TRUE)
brk1_match <- brk2_match <- res <- list()
for(id in common_samples){
brk1_i <- brk1@breaks[which(brk1@breaks$sample == id),]
brk_ranges1 <- with(brk1_i, GRanges(chrom, IRanges(start=pos, end=pos)))
brk2_i <- brk2@breaks[which(brk2@breaks$sample == id),]
brk_ranges2 <- with(brk2_i, GRanges(chrom, IRanges(start=pos, end=pos)))
options(warn=-1)
seg_seg = GenomicAlignments::findOverlaps(brk_ranges1, brk_ranges2, maxgap=maxgap)
options(warn=0)
brk_match1 <- sort(unique(queryHits(seg_seg)))
brk_match2 <- sort(unique(subjectHits(seg_seg)))
res[[id]] <- data.table(id,length(brk_match1), nrow(brk1_i), length(brk_match2), nrow(brk2_i))
colnames(res[[id]]) <- c("sample","matched.brk1", "total.brk1", "matched.brk2", "total.brk2")
brk1_match[[id]] <- brk1_i[brk_match1,]
brk2_match[[id]] <- brk2_i[brk_match2,]
}
restab <- do.call(rbind,res)
if(plot == TRUE){
def.par <- par(no.readonly = TRUE)
par(mfrow=c(2,1))
restab <- restab[order(restab$total.brk2)]
m2 <- sprintf("%.1f",100*mean(na.omit(restab$matched.brk2/restab$total.brk2)))
barplot(rbind(restab$matched.brk2, restab$total.brk2 - restab$matched.brk2),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4,
names=restab$sample,ylab="#samples" )
legend("top",paste(brk2@param$datatype," breaks matched by ",
brk1@param$datatype,
" breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
restab <- restab[order(restab$total.brk1)]
m2 <- sprintf("%.1f",100*mean(na.omit(restab$matched.brk1/restab$total.brk1)))
barplot(rbind(restab$matched.brk1, restab$total.brk1 - restab$matched.brk1),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4,
names=restab$sample,ylab="#samples")
legend("top",paste(brk1@param$datatype,
" breaks matched by ",brk2@param$datatype,
" breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
par(def.par)
}
return(list(
brk1_match = do.call(rbind,brk1_match),
brk2_match = do.call(rbind,brk2_match),
restab= restab))
}
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
pdf("figures/suppl_fig_S3.pdf",height=6,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
set.seed=1234
pdf("figures/suppl_fig_S4.pdf",height=6,width=8)
par(mar=c(3,4,1,1))
layout(matrix(c(1,2,3,4,5,6),3,2,
byrow = TRUE),widths = c(2,5))
fpt_ccle <- freq.p.test(shreg_ccle@high.density.regions.hc)
shattered.map.plot(shreg_ccle,freq.cut = fpt_ccle@freq.cut)
text(4e8,fpt_ccle@freq.cut+0.5,"fdr < 0.05",cex=1.1)
fpt_tcga <- freq.p.test(shreg_tcga@high.density.regions.hc)
shattered.map.plot(shreg_tcga,freq.cut = fpt_tcga@freq.cut)
text(4e8,fpt_tcga@freq.cut+0.6,"fdr < 0.05",cex=1.1)
fpt_pcawg <- freq.p.test(shreg_pcawg@high.density.regions.hc)
shattered.map.plot(shreg_pcawg,freq.cut = fpt_pcawg@freq.cut)
text(4e8,fpt_pcawg@freq.cut+1,"fdr < 0.05",cex=1.1)
dev.off()
# data:
# Chromothripsis survey from PCAWG table contains info about complex chromosomal rearrangements in PCAWG samples
# download from manuscript (https://doi.org/10.1038/s41588-019-0576-7)
# suppl table 1 (https://static-content.springer.com/esm/art%3A10.1038%2Fs41588-019-0576-7/MediaObjects/41588_2019_576_MOESM3_ESM.xlsx)
load("~/Box Sync/git/svpluscnv_doc_code/data/pcawg_chromo.rda",verbose=TRUE)
ali2dui[pcawg_chromo$donor_unique_id]
pcawg_chromo
pcawg_chromo$donor_unique_id
ali2dui
spcid
myres
myres
myres_in <- myres[which(myres$duid %in% unique(pcawg_chromo$donor_unique_id)),]
myres_in
dim(myres_in)
dim(myres)
spcid
shreg_all_pcawg
shreg_all_pcawg@regions.summary
ali2dui
SReg_results <- data.table(spcid,duid,do.call(rbind,shreg_all_pcawg@regions.summary))
ss_HC_chr
SReg_results <- data.table(spcid,duid,do.call(rbind,shreg_all_pcawg@regions.summary))
# to make data comparable we restrict the analysis to samples included by the PCAWG study only (see https://doi.org/10.1038/s41588-019-0576-7 for filtering details)
SReg_results_in <- SReg_results[which(SReg_results$duid %in% unique(pcawg_chromo$donor_unique_id)),]
SReg_results_in
# paste donor_id and chromosome from shattered regions from shattered.regions and PCAWG study
SSeek_chr <-  unique(gsub("_","_chr",unique(unite(SSeek_results, newcol, c(donor_unique_id,Chr), remove=FALSE,sep="_")$newcol)))
SReg_chr <-  unique(unite(SReg_results_in, newcol, c(duid,chrom), remove=FALSE,sep="_")$newcol)
SSeek_results <- pcawg_chromo[which(pcawg_chromo$chromo_label %in% c("High confidence","Low confidence") ),]
# paste donor_id and chromosome from shattered regions from shattered.regions and PCAWG study
SSeek_chr <-  unique(gsub("_","_chr",unique(unite(SSeek_results, newcol, c(donor_unique_id,Chr), remove=FALSE,sep="_")$newcol)))
SSeek_chr
TP <- length(intersect(SSeek_chr,SReg_chr))
FP <- length(setdiff(SReg_chr,SSeek_chr))
FN <- length(setdiff(SSeek_chr,SReg_chr))
TN<- 55844 - TP - FP -FN
c_pre <- TP/(TP+FP)
c_rec <- TP/(TP+FN)
F1 <- 2*c_pre*c_rec/(c_pre+c_rec)
MCC <- (TP*TN -FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
c_sens <- TP/(TP+FN)
c_spec <- TN/(TN+FN)
Accuracy = (TP+TN)/(TP+TN+FP+FN)
Precision = (TP) / (TP+FP)
message(paste("Accuracy=",Accuracy,"\nPrecission=",c_pre,"\nRecall=",c_rec))
SReg_results_in
unique(SSeek_results$donor_unique_id)
length(unique(SSeek_results$donor_unique_id))
load("~/Box Sync/git/svpluscnv_doc_code/data/pcawg_chromo.rda",verbose=TRUE)
length(unique(pcawg_chromo$donor_unique_id))
#The total number of tests is defined by the number of samples in the gold standard times chromosomes (23):
tot <- length(unique(pcawg_chromo$donor_unique_id))*23
tot
message(paste("Accuracy=",Accuracy,"\nPrecission=",c_pre,"\nRecall=",c_rec))
Precision
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1 <- 2*Precision*Recall/(Precision+Recall)
MCC <- (TP*TN -FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
Sens <- TP/(TP+FN)
Spec <- TN/(TN+FN)
Accuracy = (TP+TN)/(TP+TN+FP+FN)
message(paste("Accuracy=",Accuracy,"\nPrecission=",Precision,"\nRecall=",Recall))
cnv.freq
cnv_brca_pcawg
# Figure Suppl 1
pdf("figures/suppl_fig_S1.pdf",height=5,width=6)
par(mfrow=c(3,1),mar=c(3,4,1,4))
cnv.freq(cnv_brca_ccle,fc.pct = 0.3, ploidy = TRUE)
cnv.freq(cnv_brca_tcga,fc.pct = 0.3, ploidy = TRUE)
cnv.freq(cnv_brca_pcawg,fc.pct = 0.3, ploidy = TRUE)
dev.off()
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
pdf("figures/suppl_fig_S3.pdf",height=4,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
pdf("figures/suppl_fig_S3.pdf",height=4,width=6)
par(mar=c(4,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
pdf("figures/suppl_fig_S3.pdf",height=5,width=6)
par(mar=c(4,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
pdf("figures/suppl_fig_S3.pdf",height=5,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
dev.off()
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
#pdf("figures/suppl_fig_S3.pdf",height=5,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle)
#dev.off()
match.breaks(cnv_breaks_ccle,svc_breaks_ccle,maxgap = 10000)
match.breaks(cnv_breaks_ccle,svc_breaks_ccle,maxgap = 50000)
match.breaks(cnv_breaks_ccle,svc_breaks_ccle,maxgap = 10000)
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
pdf("figures/suppl_fig_S3.pdf",height=5,width=6)
par(mar=c(5,5,2,2))
match.breaks(cnv_breaks_ccle,svc_breaks_ccle, maxgap = 10000)
dev.off()
pdf("figures/suppl_fig_S4.pdf",height=6,width=8)
layout(matrix(c(1,2,3,4,5,6),3,2,
byrow = TRUE),widths = c(2,5))
par(mar=c(3,4,1,1))
fpt_ccle <- freq.p.test(shreg_ccle@high.density.regions.hc)
par(mar=c(3,4,1,4))
shattered.map.plot(shreg_ccle,freq.cut = fpt_ccle@freq.cut)
text(4e8,fpt_ccle@freq.cut+0.5,"fdr < 0.05",cex=1.1)
par(mar=c(3,4,1,1))
fpt_tcga <- freq.p.test(shreg_tcga@high.density.regions.hc)
par(mar=c(3,4,1,4))
shattered.map.plot(shreg_tcga,freq.cut = fpt_tcga@freq.cut)
text(4e8,fpt_tcga@freq.cut+0.6,"fdr < 0.05",cex=1.1)
par(mar=c(3,4,1,1))
fpt_pcawg <- freq.p.test(shreg_pcawg@high.density.regions.hc)
par(mar=c(3,4,1,4))
shattered.map.plot(shreg_pcawg,freq.cut = fpt_pcawg@freq.cut)
text(4e8,fpt_pcawg@freq.cut+1,"fdr < 0.05",cex=1.1)
dev.off()
pdf("figures/suppl_fig_S4.pdf",height=6,width=8)
layout(matrix(c(1,2,3,4,5,6),3,2,
byrow = TRUE),widths = c(2,5))
par(mar=c(3,4,1,1))
fpt_ccle <- freq.p.test(shreg_ccle@high.density.regions.hc)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_ccle,freq.cut = fpt_ccle@freq.cut)
text(4e8,fpt_ccle@freq.cut+0.5,"fdr < 0.05",cex=1.1)
par(mar=c(3,4,1,1))
fpt_tcga <- freq.p.test(shreg_tcga@high.density.regions.hc)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_tcga,freq.cut = fpt_tcga@freq.cut)
text(4e8,fpt_tcga@freq.cut+0.6,"fdr < 0.05",cex=1.1)
par(mar=c(3,4,1,1))
fpt_pcawg <- freq.p.test(shreg_pcawg@high.density.regions.hc)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_pcawg,freq.cut = fpt_pcawg@freq.cut)
text(4e8,fpt_pcawg@freq.cut+1,"fdr < 0.05",cex=1.1)
dev.off()
intersect(cnv_brca_ccle@data$sample,svc_brca_ccle@data$sample)
length(intersect(cnv_brca_ccle@data$sample,svc_brca_ccle@data$sample))
rm(list = ls(all.names = TRUE))
.rs.restartR()
library(devtools)
library(roxygen2)
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
setwd("~/Box Sync/git/")
install("svpluscnv")
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
setwd("/svpluscnv_doc_code/")
setwd("~/Box Sync/git/svpluscnv_doc_code/")
# data:
# CCLE BREAST data contains CNVs derived from SNP arrays and SVs derived from WGS
# download from DepMap (https://depmap.org/portal/download/)
load("~/Box Sync/git/svpluscnv_doc_code/data/brca_ccle.rda",verbose=TRUE)
# data:
# TCGA Breast-AdenoCA data contains CNVs and SVs derived from WGS
# download from PCAWG (https://dcc.icgc.org/releases/PCAWG)
load("~/Box Sync/git/svpluscnv_doc_code/data/brca_tcga.rda",verbose=TRUE)
# data:
# PCAWG all tumor types data contains CNVs and SVs derived from WGS
# download from GDC legacy portal (https://portal.gdc.cancer.gov/legacy-archive/
load("~/Box Sync/git/svpluscnv_doc_code/data/pcawg.rda",verbose=TRUE)
brca_samples_pcawg <- names(which(ali2hist == "Breast-AdenoCA"))
cnv_brca_pcawg <- cnv_pcawg; cnv_brca_pcawg@data <- cnv_brca_pcawg@data[which(cnv_brca_pcawg@data$sample %in% brca_samples_pcawg)]
svc_brca_pcawg <- svc_pcawg; svc_brca_pcawg@data <- svc_brca_pcawg@data[which(svc_brca_pcawg@data$sample %in% brca_samples_pcawg)]
shreg_ccle <- shattered.regions(cnv_brca_ccle,svc_brca_ccle,fc.pct = 0.1, interleaved.cut = 0.33, verbose=FALSE)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
dev.off()
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
png("~/Box Sync/")
dev.off()
dev.off()
dev.off()
png("~/Box Sync/brca_line_circos.png",width=500,height=500)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
png("~/Box Sync/brca_line_circos.png",width=300,height=300)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
pdf("~/Box Sync/brca_line_circos.pdf",width=5,height=5)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
pdf("~/Box Sync/brca_line_circos.pdf",width=4,height=4)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
pdf("~/Box Sync/brca_line_circos.pdf",width=3,height=3)
circ.chromo.plot(shreg_ccle,sample.id = "MDAMB134VI_BREAST")
dev.off()
